"class SuffixArray{",
"private:",
"\tvoid get_sa_vec_sub(vector<int>& origin_vector,vector<int>& suffix_vector,vector<char>& LS,vector<int>& pos,vector<int>& origin_cnt){",
"\t\tint a,b;",
"\t\tint i,j;",
"\t\tint n=origin_vector.size();",
"\t\tvector<int> cnt(origin_cnt.size(),0);",
"\t\tfor(i=0;i<n;i++){///fill L type",
"\t\t\ta=suffix_vector[i]-1;",
"\t\t\tif(a<0 || LS[a]==0)continue;",
"\t\t\tb=origin_vector[a];",
"\t\t\tsuffix_vector[pos[b]+cnt[b]]=a;",
"\t\t\tcnt[b]++;",
"\t\t}",
"\t\tcnt=origin_cnt;",
"\t\tfor(i=n-1;i>=0;i--){//fill S type",
"\t\t\ta=suffix_vector[i]-1;",
"\t\t\tif(a<0 || LS[a]==1)continue;",
"\t\t\tb=origin_vector[a];",
"\t\t\tcnt[b]--;",
"\t\t\tsuffix_vector[pos[b]+cnt[b]]=a;",
"\t\t}",
"\t}",
"\tvector<int> get_sa_vec(vector<int>& origin_vector){",
"\t\t//origin_vector: non-negative integer, Max=O(n)",
"\t\tint n=origin_vector.size();",
"\t\tint i,j,k;",
"\t\tint a,b;",
"\t\tfor(i=0,a=0;i<n;i++){// set guard",
"\t\t\torigin_vector[i]++;",
"\t\t\ta=max(a,origin_vector[i]);",
"\t\t}",
"\t\torigin_vector.push_back(0),n++;",
"",
"\t\tvector<int> suffix_vector(n);//id in sort strings",
"\t\tvector<char> LS(n,0);//0:Smaller, 1:Larger",
"\t\tvector<int> next_vector,lms(n,-1),lms_vec;",
"\t\tvector<int> origin_cnt(a+1),pos(a+1);",
"\t\tfor(i=0;i<n;i++){",
"\t\t\torigin_cnt[origin_vector[i]]++;",
"\t\t}",
"\t\tfor(i=0;i<a;i++){",
"\t\t\tpos[i+1]=pos[i]+origin_cnt[i];",
"\t\t}",
"\t\tvector<int> cnt=origin_cnt;",
"\t\tfor(i=n-2;i>=0;i--){",
"\t\t\tif(origin_vector[i]>origin_vector[i+1])LS[i]=1;",
"\t\t\tif(origin_vector[i]==origin_vector[i+1])LS[i]=LS[i+1];",
"\t\t\tif(LS[i]==1 && LS[i+1]==0){",
"\t\t\t\tb=origin_vector[i+1];",
"\t\t\t\tcnt[b]--;",
"\t\t\t\tsuffix_vector[pos[b]+cnt[b]]=i+1;",
"\t\t\t\tlms_vec.push_back(i+1);",
"\t\t\t}",
"\t\t}",
"\t\treverse(lms_vec.begin(),lms_vec.end());//to ascending order",
"\t\ti=0;",
"\t\tfor(auto num:lms_vec){",
"\t\t\tlms[num]=i++;",
"\t\t}",
"\t\tget_sa_vec_sub(origin_vector,suffix_vector,LS,pos,origin_cnt);",
"\t\tif(lms_vec.size()<=1)return suffix_vector;//only guard",
"\t\tnext_vector.assign(lms_vec.size()-1,0);",
"\t\tint bef_pos=n-1;",
"\t\tfor(i=1,k=-1;i<n;i++){",
"\t\t\ta=suffix_vector[i];",
"\t\t\tif(lms[a]!=-1){//left most S",
"\t\t\t\tassert(lms[a]<next_vector.size());",
"\t\t\t\tfor(j=0;j<n;j++){//check if same string or not",
"\t\t\t\t\tif(bef_pos+j>=n || a+j>=n)break;",
"\t\t\t\t\tif(j>0 && (lms[a+j]!=-1 && lms[bef_pos+j]!=-1))break;",
"\t\t\t\t\tif(j>0 && (lms[a+j]!=-1 || lms[bef_pos+j]!=-1)){",
"\t\t\t\t\t\tk++;",
"\t\t\t\t\t\tbreak;",
"\t\t\t\t\t}",
"\t\t\t\t\tif(origin_vector[a+j]!=origin_vector[bef_pos+j]){",
"\t\t\t\t\t\tk++;",
"\t\t\t\t\t\tbreak;",
"\t\t\t\t\t}",
"\t\t\t\t}",
"\t\t\t\tnext_vector[lms[a]]=k;",
"\t\t\t\tbef_pos=a;",
"\t\t\t}",
"\t\t}",
"\t\tvector<int> lms_sa=get_sa_vec(next_vector);",
"\t\tsuffix_vector.assign(n,0);",
"\t\treverse(lms_sa.begin(),lms_sa.end());//to descending order",
"\t\tcnt=origin_cnt;",
"\t\tfor(auto index:lms_sa){",
"\t\t\ta=lms_vec[index];",
"\t\t\tb=origin_vector[a];",
"\t\t\tcnt[b]--;",
"\t\t\tsuffix_vector[pos[b]+cnt[b]]=a;",
"\t\t}",
"\t\tget_sa_vec_sub(origin_vector,suffix_vector,LS,pos,origin_cnt);",
"\t\treturn suffix_vector;",
"\t}",
"public:",
"\tvector<int> get_sa(vector<int> v1){",
"\t\tvector<int> vs=get_sa_vec(v1);",
"\t\tvs.erase(vs.begin());",
"\t\treturn vs;",
"\t}",
"\tvector<int> get_sa(string origin_string){",
"\t\tvector<int> origin_vector(origin_string.size(),0);",
"\t\tfor(int i=0;i<origin_string.size();i++){",
"\t\t\torigin_vector[i]=(int)origin_string[i];",
"\t\t}",
"\t\treturn get_sa(origin_vector);",
"\t}",
"};"
